version: "3.9"

services:
  web:
    build:
      context: .
      target: runtime
    image: visitor-system/web:latest
    env_file:
      - .env.prod
    command: gunicorn visitor_system.asgi:application -k uvicorn.workers.UvicornWorker -w 4 -b 0.0.0.0:8000
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  worker:
    image: visitor-system/web:latest
    env_file:
      - .env.prod
    command: celery -A visitor_system worker --loglevel=info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A visitor_system inspect ping -d celery@$(hostname) || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  beat:
    image: visitor-system/web:latest
    env_file:
      - .env.prod
    command: celery -A visitor_system beat --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  flower:
    image: visitor-system/web:latest
    env_file:
      - .env.prod
    command: celery -A visitor_system flower --port=5555 --persistent
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:14
    env_file:
      - .env.prod
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
