name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: visitor_system_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: visitor_system_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      DJANGO_SETTINGS_MODULE: visitor_system.conf.dev
      DJANGO_DEBUG: 'True'
      DJANGO_ALLOWED_HOSTS: 'localhost,127.0.0.1'
      IIN_ENCRYPTION_KEY: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA='
      DJANGO_SECRET_KEY: 'test-secret-key'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==1.7.1
      - name: Install deps
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
      - name: Migrate
        working-directory: visitor_system
        run: |
          python manage.py migrate --noinput
      - name: Collect static
        working-directory: visitor_system
        run: |
          python manage.py collectstatic --noinput
      - name: Run tests
        working-directory: visitor_system
        run: |
          python manage.py test

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: Docker Build
        run: |
          docker build -t visitor-system:ci .

  sentry-release:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && secrets.SENTRY_AUTH_TOKEN != '' && secrets.SENTRY_ORG != '' && secrets.SENTRY_PROJECT != '' }}
    needs: docker-build
    steps:
      - uses: actions/checkout@v4
      - name: Install sentry-cli
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
      - name: Create Sentry release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_LOG_LEVEL: debug
        run: |
          set +e
          echo "Validating Sentry configuration..."
          sentry-cli info
          if [ $? -ne 0 ]; then
            echo "Sentry CLI is not configured correctly or unauthorized. Skipping Sentry release."
            exit 0
          fi

          export RELEASE=${GITHUB_SHA}
          echo "Creating Sentry release: $RELEASE for project $SENTRY_PROJECT in org $SENTRY_ORG"
          sentry-cli releases new "$RELEASE"
          if [ $? -ne 0 ]; then
            echo "Failed to create Sentry release (project not found or misconfigured). Skipping."
            exit 0
          fi

          sentry-cli releases set-commits --auto "$RELEASE"
          if [ $? -ne 0 ]; then
            echo "Failed to set commits for Sentry release. Skipping finalize."
            exit 0
          fi

          sentry-cli releases finalize "$RELEASE"
          if [ $? -ne 0 ]; then
            echo "Failed to finalize Sentry release. Skipping."
            exit 0
          fi

