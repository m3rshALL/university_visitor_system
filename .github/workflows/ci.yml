name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  POETRY_VERSION: 1.8.3
  PYTHON_VERSION: "3.12"

jobs:
  lint-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: visitor_system_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        run: python -m pip install --upgrade pip && pip install "poetry==${POETRY_VERSION}"
      - name: Install dependencies
        run: poetry install --with dev
      - name: Run linters
        run: poetry run flake8
      - name: Prepare database
        env:
          DATABASE_HOST: 127.0.0.1
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_DB: visitor_system_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          poetry run python visitor_system/manage.py migrate --noinput
      - name: Run tests
        env:
          DATABASE_HOST: 127.0.0.1
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_DB: visitor_system_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        run: poetry run python visitor_system/manage.py test --parallel
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: "**/test-results.xml"
          if-no-files-found: ignore

  security-scan:
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry and scanners
        run: |
          python -m pip install --upgrade pip
          pip install "poetry==${POETRY_VERSION}" pip-audit bandit
      - name: Export requirements
        run: poetry export --only main --without-hashes -f requirements.txt -o requirements.txt
      - name: pip-audit
        run: pip-audit -r requirements.txt
      - name: Bandit
        run: bandit -r visitor_system -ll

  docker-image:
    needs: [lint-test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: secrets.GITHUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: docker build --target runtime -t visitor-system/web:${{ github.sha }} .
      - name: Validate compose
        run: docker compose -f docker-compose.prod.yml config
      - name: Push image
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag visitor-system/web:${{ github.sha }} ghcr.io/${{ github.repository }}/visitor-system/web:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}/visitor-system/web:${{ github.sha }}
