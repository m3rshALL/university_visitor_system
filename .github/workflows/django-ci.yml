name: Django CI with Poetry

# События, которые будут запускать этот workflow
on:
  push:
    branches: [ main ] # или master, если у тебя так называется основная ветка
  pull_request:
    branches: [ main ] # или master

jobs:
  build:
    # Тип исполнителя (runner), на котором будет выполняться задание
    # ubuntu-latest - это последняя стабильная версия Ubuntu, предоставляемая GitHub
    runs-on: ubuntu-latest
    
    # Add service containers
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: visitor_system_user
          POSTGRES_PASSWORD: Sako2020
          POSTGRES_DB: visitor_system_db
        ports:
          - 5432:5432
        # Health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # Add Redis service container
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        # Health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      # Можно указать несколько версий Python, если хочешь тестировать на них
      matrix:
        python-version: ["3.13"] # Only use Python 3.13

    steps:
    # Шаг 1: Клонирование твоего репозитория
    # Используем готовый action 'actions/checkout'
    - name: Checkout repository
      uses: actions/checkout@v4 # Рекомендуется использовать последнюю мажорную версию

    # Шаг 2: Настройка Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        # We remove explicit poetry caching here; snok/install-poetry will handle its installation.
        # Caching the .venv directory (done in a later step) is the most effective caching for dependencies.

    # Шаг 2.1: Установка Poetry с использованием snok/install-poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4 # Using a specific stable version of the action for reproducibility
      with:
        version: "2.1.3" # Specify the Poetry version that pipx was installing
        virtualenvs-in-project: true # Configure Poetry to create .venv in the project directory
        # The snok/install-poetry action handles adding Poetry to the PATH.

    # Шаг 2.2: Кэширование виртуального окружения Poetry
    # Кэшируем директорию .venv, где Poetry будет создавать окружение
    - name: Cache Poetry virtualenv
      id: cache-poetry-venv # Даем ID для использования в условии следующего шага (если потребуется)
      uses: actions/cache@v4
      with:
        path: .venv # Poetry создаст venv здесь из-за virtualenvs.in-project=true
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-    # Шаг 4: Установка зависимостей проекта с помощью Poetry
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi --no-root
        # Install flake8 for linting
        poetry add --group dev flake8
        # Если кэш не был восстановлен, poetry install создаст .venv и установит все.
        # Если кэш был восстановлен, poetry install быстро проверит и доустановит недостающее.
        # Если у тебя есть группы зависимостей, например [tool.poetry.group.dev.dependencies]
        # для flake8 и других инструментов разработки, используй:
        # poetry install --with dev --no-interaction --no-ansi

    # Setup environment variables for Django tests
    - name: Set up environment for Django
      run: |
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "DB_NAME=visitor_system_db" >> $GITHUB_ENV
        echo "DB_USER=visitor_system_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=Sako2020" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV

    # Create .env file
    - name: Create .env file
      working-directory: ./visitor_system
      run: |
        echo "DB_PASSWORD=Sako2020" > .env
        echo "DJANGO_SETTINGS_MODULE=visitor_system.settings" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env

    # Run Django migrations before tests
    - name: Run Django Migrations
      working-directory: ./visitor_system
      run: poetry run python manage.py migrate --noinput

    # Шаг 5: Запуск тестов Django
    - name: Run Django Tests
      working-directory: ./visitor_system
      run: poetry run python manage.py test

    # Шаг 6: Запуск flake8 для проверки кода
    - name: Lint with Flake8 (Poetry)
      working-directory: ./visitor_system
      run: poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # --count - количество ошибок
      # --exit-zero - завершить с кодом 0, даже если есть ошибки  
      # --max-complexity=10 - максимальная сложность функции
      # --max-line-length=127 - максимальная длина строки
      # --statistics - статистика по ошибкам
      # poetry run flake8 .
