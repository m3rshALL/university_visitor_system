---
description:
globs:
alwaysApply: true
---


### Protocol Summary

## Request and Response Rule

## Request
The request for executing a task contains HTTP method, request URL, and request message.
# HTTP Method
The POST method is used to execute different tasks in this manual.

# Request URL
The format of request URL is defined as "<protocol>://<serverAddress>[:serverPort][absolutePath? [query]]". For example, https://10.26.31.41:443/artemis/api/example? qa=value1&qb=value2&qc=value3.

# protocol
Required, protocol type, here in this manual, it always be "https".

# serverAddress
Required, domain name or IP address of the platform, i.e., "10.26.31.41" in the above URL example.

# serverPort
Optional, web access port No. of the platform, i.e., "403" in the above URL example. If this field is not configured, it will use the default port No.

# absolutePath
Required, the absolute path of resources for identifying, and it is a part of URI (Uniform Resource Identifier), i.e., "/artemis/api/example" in the above URL example.

# query
Optional, parameters for describing the resource, and it is the other part of URI (Uniform Resource Identifier), i.e., "qa", "qb", and "qc" in the above URL example.

# Note
The URI is a uniform resource identifier for distinguishing different resource types, which consists of absolutePath and query, i.e., "/artemis/api/example?qa=value1&qb=value2&qc=value3" in the above URL example. Sometime, the URI will replace the URL to simplify the description.


## Request Message
The request message is in JSON format and encoded by UTF-8 rule. It consists of multiple input parameters, and the parameters are named by camel case.

## Response
The response returned after calling API contains response message and status or error code.

## Response Message
The response message is in JSON format and encoded by UTF-8 rule. It consists of multiple output parameters, and the parameters are named by camel case, refer to the parameter description below.


Parameter  |    Required/ Optional	| Data Type |	Description
code	   |      Required	        |   String	|   Returned status or error code: 0 — succeeded, other codes — failed (refer to Status or Error Code for details); its maximum length is 32 bits.
msg	       |      Required	        |   String	|   Status or error description, which is in one-to-one correspondence with the code (refer to Status or Error Code for details).
data	   |      Required	        |     /	    |   The data details vary in different request URLs.


## Status or Error Code
The status or error code will be returned in the response message. If succeeded, the status code is "0"; and if failed, the error codes vary in different error types, refer to Status or Error Code for details.

# Example
Response of Calling Succeeded

{
"code": "0",
"msg": "Success", 
"data": {
    "streamURL":"rtsp://10.2.145.66:655/EUrl/CLJ52BW"
}
}


# Example
Response of Calling Failed

{
"code": "0x02401006",
"msg": "Token Exception.", 
"data": ""
}


# Example
Response of Single Data Item

{
"code":"0",
"msg":"xxxxxx", 
"data":{
    "userId": xxxxxx, "name": "xxxxxx",
    …
    }
}


# Example
Response of Paged Batch Data

{
"code":"0",
"msg":"xxxxxx", 
"data":{
    "total":5, 
    "pageSize":20, 
    "pageNo": 1,
    "list": [{
    "userId": xxxxxx, 
    "name": "xxxxxx",
    …
    },
    {
    "userId": xxxxxx, 
    "name": "xxxxxx",
    …
    }]
  }
}



# Example
Response of Batch Data without Paging

{
"code":"0",
"msg":"xxxxxx", 
"data":{
    "total":5,
    "list": [{
    "userId": xxxxxx,
    "name": "xxxxxx",
    …
    },
    {
    "userId": xxxxxx, 
    "name": "xxxxxx",
    …
    }]
  }
}

### Signature and Authentication
The APIs in this document use AK/SK digest authentication, the AK/SK is generated by the gateway.

## Signature String
The signature string before calculating consists of HTTP method, headers, and URI, which is defined as below.

HTTP METHOD "\n"
Accept "\n" 
Content-MD5 "\n" 
Content-Type "\n" 
Date "\n"
Headers 
Uri

# HTTP METHOD
The HTTP method must be upper-case, e.g., "POST".

# Accept
Setting Accept header is suggested. As for some HTTP clients, if Accept is not configured, the default value: */* will automatically be assigned to it, which may cause the failure of signature verification.

# Content-MD5
The Content-MD5 is the value of digest calculated by MD5 algorithm in the request body and processed by BASE64 algorithm, and the body must be on non-form format. E.g., String content- MD5=Base64.encodeBase64(MD5(bodyStream.getbytes("UTF-8"))).

# Content-Type
Content format, such as "text/plain", "text/xml", and "text/json".

# Date
Signature date and time.

# Headers
The headers consists of X-Ca-Key, X-Ca-Signature, X-Ca-Signature-Headers, X-Ca-Timestamp, X-Ca- Nonce, and other custom headers. A value will be assigned to each header, the format is "header:value\n", in which, the header should be in lower-case and there is no space at front and behind of the value, also, it should end with "\n". For headers in a list, they should be sorted alphabetically.

# X-Ca-Key
Required, appKey or appSecret for authentication and it should be obtained by contacting our technical supports.
Make sure the appKey or appSecret is properly kept. Otherwise, please reset it and get a new one.

# X-Ca-Signature
Required, signature string.

# X-Ca-Signature-Headers
Required, a lower-case name string of headers that will be calculated in the signature. The names in the string will be sorted alphabetically and each two names are separated by comma. E.g., x-ca-signature-headers:x-ca-key,x-ca-timestamp.

# Note
The following headers will not be calculated in the signature: X-Ca-Signature, X-Ca-Signature- Headers, Accept, Content-MD5, Content-Type, Date, Content-Length, Server, Connection, Host, Transfer-Encoding, X-Application-Context, and Content-Encoding. The request header "Except: 100-continue" is not supported by the platform.

# X-Ca-Timestamp
Optional, time stamp of calling API, the value equals to the number of milliseconds calculated from 00:00:00 on 1st., Jan., 1970 to the current time. E.g., x-ca-timstamp:1550153182830.

# X-Ca-Nonce
Optional, UUID generated when calling API, which is used with the time stamp for anti-replay.

# Uri
Uniform resource identifier, which consists of resource absolute path and query parameters, e.g., "/artemis/api/example?qa=value1&qb=value2&qc", or "/artemis/api/example".

# Note
Each header should end with "\n", but if the Accept, Content-MD5, Content-Type, or Date header does not exist, "\n" is not required.

# The following shows the example of signature string before calculating.

POST \n
*/* \n 
dGhpcyBpcyBhIGV4YW1wbGU= \n 
text/plain;charset=UTF-8 \n
Thu, 24 Nov 2016 03:12:25 GMT \n
a-header:value \n b-header:value \n
x-ca-key:1231243298 \n
x-ca-timestamp:1479956865000 \n
/artemis/api/example?a-bodyform=value&a-query=value&b-query=value




### Signature Calculation
1.	Calculate the signature string by HmacSHA256 algorithm with the appKey or appSecret to generate message digest.
2.	Calculate the message digest by BASE64 algorithm to generate the signature.

# Note
During the signature calculation, the encoding format is UTF-8.


## Signature Transfer and Authentication
The signature must be transmitted in the request header, see details in the sample code below.

/*request URL*/ 
http://www.example.com/artemis/api/example?qa=a&qb=B
/*HTTP method*/ 
POST
/*headers*/ 
Accept:*/*
Accept-Encoding:gzip, deflate,sdch 
Accept-Language:en-US,en;q=0.8 
Connection:keep-alive
Content-Length:0
Content-Type:text/plain;charset=UTF-8 
Cookie:JSESSIONID=D9C4A515CACAC31211D1612039D062B7
header-A:A header-B:b
X-Ca-Key:29666671
X-Ca-Signature:XeBEg2Ifh+FOfeProHLMYz8luWkJ00Exx7N7tJuats8= 
X-Ca-Signature-Headers:header-a,header-b,x-ca-key,x-ca-timestamp 
X-Ca-Timestamp:1479968678000
X-Requested-With:XMLHttpRequest
/*query parameters*/ 
qa:a
qb:B
/*signature string*/ 
POST\n
*/*\n
text/plain;charset=UTF-8\n
header-a:A\n header-b:b\n
x-ca-key:29666671\n
x-ca-timestamp:1479968678000\n
/artemis/api/example?a-body=a&qa=a&qb=B&x-body=x
/*signature information*/ XeBEg2Ifh+FOfeProHLMYz8luWkJ00Exx7N7tJuats8=


# Example
Sample Flow of Signature and Authentication

Note: The following red text represents the annotation.

HTTP Request
Method: POST
URL: https://10.19.133.55:443/artemis/api/common/v1/version
AK: 28446987
SK: 38cUBS8ROpP1KfbvoczsN

Header:
Accept: application/json
ContentType: application/json;charset=UTF-8
x-ca-key: 28446987
x-ca-nonce: 0043953a-85a5-4991-8240-148dcf3e3612
x-ca-timestamp: 1592894521052
x-ca-signature-headers: x-ca-key,x-ca-nonce,x-ca-timestamp
x-ca-signature: [To be calculated]

Calculate Signature

Original Information for Signature Calculation
POST (HTTP Method)
accept:application/json (Accept)
content-type:application/json;charset=UTF-8 (ContentType)
x-ca-key:28446987 (AK)
x-ca-nonce:0043953a-85a5-4991-8240-148dcf3e3612 (GUID)
x-ca-timestamp:1592894521052 (UTC Timestamp)
x-ca-signature-headers:x-ca-key,x-ca-nonce,x-ca-timestamp (CAHeader)
[Note: Each type of information should be in a new line.]

Alg: HmacSHA256
Key: SK
Encrypt Data → By Base64 → signature (e.g., the calculated information is
OqhNRmpn+Apf/8rB/cI4dpmd[?]4WXX[?]rNkNhaaA7I0lEg==)

HTTP Request
Method: POST
URL: https://10.19.133.55:443/artemis/api/common/v1/version

Header:
Accept: application/json
ContentType: application/json;charset=UTF-8
x-ca-key: 28446987
x-ca-nonce: 0043953a-85a5-4991-8240-148dcf3e3612
x-ca-timestamp: 1592894521052
x-ca-signature-headers: x-ca-key,x-ca-nonce,x-ca-timestamp
x-ca-signature: OqhNRmpn+Apf/8rB/cI4dpmd[?]4WXX[?]rNkNhaaA7I0lEg==














