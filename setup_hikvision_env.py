#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Hikvision –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent / 'visitor_system'
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'visitor_system.conf.local')
django.setup()

from hikvision_integration.models import HikDevice
from hikvision_integration.services import test_device_connection


def setup_devices():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Hikvision"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Hikvision...")
    
    devices_config = [
        {
            'name': '–ü–∞—Ä–∫–∏–Ω–≥ –≤—Ö–æ–¥',
            'host': '10.200.2.0',
            'port': 80,
            'username': 'admin',
            'password': 'DctvCnjznm20!',
            'model': 'DS-K1T673DWX20250121V043900ENFX3906159',
            'firmware': 'V4.39.0 build 250121',
            'is_primary': True,
            'doors_json': ['door1'],
            'description': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –ø–∞—Ä–∫–∏–Ω–≥'
        },
        {
            'name': '–ü–∞—Ä–∫–∏–Ω–≥ –≤—ã—Ö–æ–¥',
            'host': '10.200.2.1',
            'port': 80,
            'username': 'admin',
            'password': 'DctvCnjznm20!',
            'model': 'DS-K1T673DWX20250121V043900ENFX3906188',
            'firmware': 'V4.39.0 build 250121',
            'is_primary': False,
            'doors_json': ['door2'],
            'description': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—ã—Ö–æ–¥–∞ —Å –ø–∞—Ä–∫–∏–Ω–≥–∞'
        },
        {
            'name': '–¢—É—Ä–Ω–∏–∫–µ—Ç –≤—ã—Ö–æ–¥',
            'host': '10.1.18.50',
            'port': 80,
            'username': 'admin',
            'password': 'DctvCnjznm20!',
            'model': 'DS-K1T673DWX20250703V044101ENAK0468614',
            'firmware': 'V4.41.1 build 250703',
            'is_primary': False,
            'doors_json': ['door3'],
            'description': '–¢—É—Ä–Ω–∏–∫–µ—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–¥–∞–Ω–∏—è'
        },
        {
            'name': '–¢—É—Ä–Ω–∏–∫–µ—Ç –≤—Ö–æ–¥',
            'host': '10.1.18.47',
            'port': 80,
            'username': 'admin',
            'password': 'DctvCnjznm20!',
            'model': 'DS-K1T673DWX20250703V044101ENAK0477599',
            'firmware': 'V4.41.1 build 250703',
            'is_primary': False,
            'doors_json': ['door4'],
            'description': '–¢—É—Ä–Ω–∏–∫–µ—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–¥–∞–Ω–∏–µ'
        }
    ]

    for config in devices_config:
        device, created = HikDevice.objects.get_or_create(
            host=config['host'],
            defaults={
                'port': config['port'],
                'username': config['username'],
                'password': config['password'],
                'verify_ssl': False,
                'is_primary': config['is_primary'],
                'enabled': True,
                'doors_json': config['doors_json'],
                'description': config['description']
            }
        )
        
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config['name']} ({config['host']})")
        else:
            print(f"‚ö†Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {config['name']} ({config['host']})")


def test_connections():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    devices = HikDevice.objects.filter(enabled=True)
    
    if not devices.exists():
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    success_count = 0
    total_count = devices.count()
    
    for device in devices:
        print(f"\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {device.host}...")
        
        result = test_device_connection(device)
        
        if result['status'] == 'success':
            print(f"‚úÖ {device.host} - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ú–æ–¥–µ–ª—å: {result['model']}")
            print(f"   –ü—Ä–æ—à–∏–≤–∫–∞: {result['firmware']}")
            print(f"   –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {result['serial']}")
            success_count += 1
        else:
            print(f"‚ùå {device.host} - –û—à–∏–±–∫–∞: {result['error']}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{total_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã!")
    elif success_count > 0:
        print(f"‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã: {total_count - success_count} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    else:
        print("‚ùå –ù–∏ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Hikvision –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        setup_devices()
        test_connections()
        
        print("\n" + "=" * 50)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ HIK_WEBHOOK_SECRET –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Celery worker: celery -A visitor_system worker -l info")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ webhook: /hikvision/webhook/")
        print("4. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –≥–æ—Å—Ç—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FaceID")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
