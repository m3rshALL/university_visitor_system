"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API egov.kz
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_api.py
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'visitor_system.conf.dev')
django.setup()

from egov_integration.services import egov_service, EgovAPIException
from egov_integration.models import EgovSettings
from django.contrib.auth.models import User


def test_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        print("Base URL: {}".format(egov_service.base_url))
        print(
            "API Key: {}".format(
                "‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω" if egov_service.api_key else "‚úó –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            )
        )
        print("Timeout: {}s".format(egov_service.timeout))
        print("Max Retries: {}".format(egov_service.max_retries))
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False


def test_api_health():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    
    try:
        health = egov_service.check_api_health()
        print(f"–°—Ç–∞—Ç—É—Å: {health['status']}")
        
        if health['status'] == 'healthy':
            print("‚úì API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(
                "‚úó API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}".format(
                    health.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                )
            )
            return False
            
    except Exception as e:
        print("‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}".format(e))
        return False


def test_iin_verification():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ò–ù"""
    print("\nüìã –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ò–ù...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ò–ò–ù (–Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π)
    test_iin = "123456789012"
    
    try:
        admin_user = User.objects.filter(is_superuser=True).first()
        result = egov_service.verify_iin(test_iin, user=admin_user)
        
        print(f"–ò–ò–ù: {test_iin}")
        print(f"–°—Ç–∞—Ç—É—Å: {result.status}")
        print(f"ID –ø—Ä–æ–≤–µ—Ä–∫–∏: {result.id}")
        
        if result.error_message:
            print(f"–û—à–∏–±–∫–∞: {result.error_message}")
        
        if result.verified_data:
            print(f"–î–∞–Ω–Ω—ã–µ: {result.verified_data}")
        
        return result.status != 'failed'
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False


def test_database_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î...")
    
    try:
        settings_count = EgovSettings.objects.count()
        print(f"–ù–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î: {settings_count}")
        
        if settings_count > 0:
            for setting in EgovSettings.objects.all()[:5]:
                value_preview = "***" if setting.is_encrypted else setting.value[:50]
                print(f"-{setting.name}: {value_preview}")
        
        return True
        
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False


def setup_test_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\n‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    try:
        admin_user = User.objects.filter(is_superuser=True).first()
        
        test_settings = [
            ('EGOV_BASE_URL', 'https://data.egov.kz/api/v4', False),
            ('EGOV_TIMEOUT', '30', False),
            ('EGOV_MAX_RETRIES', '3', False),
        ]
        
        for name, value, encrypted in test_settings:
            created = EgovSettings.objects.update_or_create(
                name=name,
                defaults={
                    'value': value,
                    'is_encrypted': encrypted,
                    'description': f'–¢–µ—Å—Ç–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {name}',
                    'updated_by': admin_user
                }
            )
            status = "—Å–æ–∑–¥–∞–Ω–∞" if created else "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            print(f"‚úì {name}: {status}")
        
        return True
        
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å egov.kz")
    print("=" * 50)
    
    tests = [
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", test_settings),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_settings),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", setup_test_settings),
        ("API Health", test_api_health),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò–ù", test_iin_verification),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úì –ü–†–û–ô–î–ï–ù" if success else "‚úó –û–®–ò–ë–ö–ê"
        print(f"{test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == len(results):
        print("üéâ–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    elif passed > len(results) // 2:
        print("‚ö†Ô∏è–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("üö®–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á –Ω–∞ https://data.egov.kz/")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ Django Admin")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")


if __name__ == '__main__':
    main()
