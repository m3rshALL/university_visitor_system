version: '3.8'

services:
  app:
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
    container_name: django_app
    volumes:
      - .:/app
      - ./entrypoint.sh:/app/entrypoint.sh
      - staticfiles_volume:/app/staticfiles
      - mediafiles_volume:/app/mediafiles
    expose:
      - '8000'
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - staticfiles_volume:/app/staticfiles:ro
      - mediafiles_volume:/app/mediafiles:ro
    depends_on:
      - app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13-alpine
    container_name: postgres_db
    volumes:
      - postgres_data_volume:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ` -d `"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery_worker:
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
    container_name: celery_worker
    command: poetry run celery -A visitor_system worker -l info
    volumes:
      - .:/app
      - ./entrypoint.sh:/app/entrypoint.sh
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_started

volumes:
  postgres_data_volume:
  staticfiles_volume:
  mediafiles_volume:
