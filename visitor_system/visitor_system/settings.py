"""
Django settings for visitor_system project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from django.conf import settings
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b_2g0i5hh+p3k()3^_pgjz3#e9hpxk^ub(dm&+i^y=do=w-^p+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['10.1.10.206', '127.0.0.1', 'localhost', '.ngrok-free.app']


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',  # Для работы с WhiteNoise
    'django.contrib.sites',
    
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.microsoft',
    
    'django_extensions',
    'django_select2',
    'django_filters',
    
    'pwa',
    'widget_tweaks',
    
    'authentication',
    'visitors',
    'departments',
    'notifications',
    
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Для работы с WhiteNoise
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    # --- Наше Middleware ---
    'visitors.middleware.ProfileSetupMiddleware',
    # ----------------------
]

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

ROOT_URLCONF = 'visitor_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.parent / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'visitor_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Движок PostgreSQL
        'NAME': os.environ.get('POSTGRES_DB', 'visitor_system_db'),           # Имя базы из Шага 2
        'USER': os.environ.get('POSTGRES_USER', 'visitor_system_user'),           # Имя пользователя из Шага 2
        # --- Пароль из Шага 2 (ЛУЧШЕ ЧЕРЕЗ ПЕРЕМЕННУЮ ОКРУЖЕНИЯ!) ---
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'Sako2020'), # Ensure POSTGRES_PASSWORD is set in your .env
        # --- Хост (где запущен сервер PostgreSQL) ---
        # Специальная проверка - если мы в Docker, используем 'db', иначе 'localhost'
        'HOST': 'localhost',  # For local development, always use localhost
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),      # Стандартный порт PostgreSQL
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Almaty'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = os.path.join(BASE_DIR / 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

LOGIN_URL = '/accounts/login'
LOGIN_REDIRECT_URL = 'employee_dashboard'
LOGOUT_REDIRECT_URL = '/'

# Allauth settings
#ACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_GET = True


client_id = os.getenv('client_id')
client_secret = os.getenv('client_secret')
tenant_id = os.getenv('tenant_id')

SOCIALACCOUNT_PROVIDERS = {
    'microsoft': {
        'APP': {
            'client_id': client_id,
            'secret': client_secret,
            'key': ''
        },
        'TENANT': os.getenv('MS_TENANT_ID', tenant_id),
        'AUTH_PARAMS': {'prompt': 'select_account'},
        'SCOPE': ['User.Read'],
        
    }
}



# --- Настройки CSRF ---

# --- Настройки для работы за прокси (например, ngrok с HTTPS) ---
# Говорим Django доверять заголовку X-Forwarded-Proto, который ngrok (и другие прокси)
# обычно устанавливает в 'https' для оригинальных HTTPS запросов.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True # Также полезно, если Nginx передает оригинальный Host
# Если вы используете Django >= 3.1, SECURE_PROXY_SSL_HEADER может быть достаточно.
# Для более старых версий может потребоваться CSRF_COOKIE_SECURE = True и SESSION_COOKIE_SECURE = True
# для production, но это зависит от того, всегда ли вы будете за Nginx.

# Установите True, так как вы используете HTTPS через ngrok
CSRF_COOKIE_SECURE = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
# Установите True, если вы хотите, чтобы CSRF cookie отправлялся только по HTTPS
# Это рекомендуется для production и при использовании HTTPS локально/через ngrok
SESSION_COOKIE_SECURE = True

# --- ВАЖНО: Добавьте ваш ngrok домен в доверенные источники ---
# Замените '15f6-85-159-27-200.ngrok-free.app' на ваш ТЕКУЩИЙ ngrok URL,
# но без 'https://' в начале.
CSRF_TRUSTED_ORIGINS = [
    'https://1de3-85-159-27-200.ngrok-free.app' # <-- ВАШ NGROK URL
    # Можно добавить и другие доверенные хосты, если нужно, например,
    # 'http://localhost:8000',
    # 'http://127.0.0.1:8000'
]
# ----------------------------------------------------------


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.office365.com' # Сервер Microsoft 365
# EMAIL_PORT = 587                   # Порт для TLS
# EMAIL_USE_TLS = True               # Включить TLS (обязательно)
# EMAIL_USE_SSL = False              # SSL не используется с TLS на этом порту

# --- Учетные данные (ВАЖНО: Используйте переменные окружения!) ---
# Убедитесь, что переменная окружения EMAIL_HOST_USER содержит этот адрес
# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'pass-system@astanait.edu.kz')

# В переменной окружения EMAIL_HOST_PASSWORD должен быть:
# 1. Пароль Приложения (App Password), если для аккаунта включена MFA
# 2. ОБЫЧНЫЙ пароль, ЕСЛИ MFA выключена И SMTP AUTH разрешен (см. Шаг 2)
# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'DFYZwHq9')

# Адрес отправителя по умолчанию
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# -----------------------------------------------------------------')
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.office365.com' # Сервер Microsoft 365
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_METHOD_COMMAND = 'STARTTLS'
# EMAIL_USE_SSL = False
# EMAIL_HOST_USER = 'visitor-pass-system@outlook.com' # Ваш email-адрес
# EMAIL_HOST_PASSWORD = 'zbqqdxhdfuvwccdg'

# Email settings
# https://docs.djangoproject.com/en/5.2/topics/email/#email-backends
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'sakoakimbaev1997@gmail.com' # Ваш email-адрес
EMAIL_HOST_PASSWORD = 'gpww udih dxtu kvdy'
#DEFAULT_FROM_EMAIL = 'Система пропусков университета <noreply@university.edu>'

# Email, который будет указан как отправитель по умолчанию
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER # Или другой адрес, разрешенный для отправки с вашего аккаунта

# Email для получения сообщений об ошибках (если DEBUG=False)
# ADMINS = [('Your Name', 'your_personal_email@example.com')]
# SERVER_EMAIL = DEFAULT_FROM_EMAIL # С какого адреса будут приходить системные ошибки

# ----- Настройки Celery -----
# URL брокера сообщений (Redis)
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', f"redis://{os.environ.get('REDIS_HOST', 'localhost')}:{os.environ.get('REDIS_PORT', '6379')}/0")

# Add connection retry settings for more stability
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'retry_policy': {
        'max_retries': 10,
        'interval_start': 0,
        'interval_step': 0.2,
        'interval_max': 1,
    },
}

# Add health check settings
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 10

# Остальные настройки Celery
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', f"redis://{os.environ.get('REDIS_HOST', 'localhost')}:{os.environ.get('REDIS_PORT', '6379')}/0")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Дополнительные настройки Redis для более устойчивой работы
CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = {
    'retry_policy': {
        'max_retries': 10,
    },
}

REDIS_HOST='localhost'
REDIS_PORT=6379

LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(parents=True, exist_ok=True)
# ---------------------------------------------------------

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Не отключать логгеры Django по умолчанию
    # --- ФОРМАТТЕРЫ: Определяют внешний вид сообщений ---
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{', # Используем стиль format()
        },
        'simple': {
            'format': '{levelname} {asctime} {module}: {message}',
            'style': '{',
        },
    },
    # --- ОБРАБОТЧИКИ: Определяют, куда отправлять логи ---
    'handlers': {
        # Вывод в консоль (для разработки)
        'console': {
            'level': 'DEBUG', # Показывать сообщения уровня DEBUG и выше в консоли
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # Использовать простой формат
        },
        # Запись в файл с ротацией по размеру
        'file': {
            'level': 'INFO', # Писать в файл сообщения уровня INFO и выше
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'visitor_system.log', # Путь к файлу лога
            'maxBytes': 1024*1024*5, # 5 MB - максимальный размер файла перед ротацией
            'backupCount': 5, # Хранить 5 старых файлов лога
            'formatter': 'verbose', # Использовать подробный формат
            'encoding': 'utf-8', # Явно указываем кодировку
        },
    },
    # --- ЛОГГЕРЫ: Определяют, какие сообщения обрабатывать ---
    'loggers': {
        # Корневой логгер (ловит все, что не поймали другие)
        '': {
            'handlers': ['console', 'file'], # Отправлять и в консоль, и в файл
            'level': 'INFO', # Уровень по умолчанию INFO
            'propagate': True,
        },
        # Логгер для Django (ошибки сервера, запросы и т.д.)
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO', # Поставьте 'DEBUG' для отладки, но будет много сообщений
            'propagate': False, # Не передавать сообщения корневому логгеру
        },
        # Логгер для SQL запросов (очень много вывода, включать только для отладки)
        'django.db.backends': {
            'handlers': ['console'], # Обычно достаточно в консоль
            'level': 'ERROR', # Поставьте 'DEBUG' чтобы видеть все SQL запросы
            'propagate': False,
        },
        # Логгер для вашего приложения visitors (можно создать отдельные для views, forms и т.д.)
        'visitors': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # Позволяет писать отладочные сообщения из вашего приложения
            'propagate': False,
        },
        # Логгер для вашего приложения notifications
        'notifications': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Логгер для Celery (если используете стандартное логирование Celery)
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True, # Можно передавать корневому
        },
        # Логгер для Redis
        'redis': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # Set to DEBUG when troubleshooting
            'propagate': False,
        },
        # Логгер для django_redis
        'django_redis': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # Set to DEBUG when troubleshooting
            'propagate': False,
        },
    },
}



# ---------------------------------------------------------

# ----- Настройки Кэширования -----
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # Указываем URL к Redis, используя базу данных №1 для кэша
        "LOCATION": os.environ.get('CACHE_URL', f"redis://{os.environ.get('REDIS_HOST', '127.0.0.1')}:{os.environ.get('REDIS_PORT', '6379')}/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # Настройки подключения и обработки ошибок
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 50, 
                "socket_connect_timeout": 5,
                "socket_keepalive": True,  # Keep connections alive
                "retry_on_timeout": True,  # Retry on timeout
            },
            "SOCKET_TIMEOUT": 5,
            "IGNORE_EXCEPTIONS": True,  # Не падать, если Redis недоступен
            "RETRY_AFTER_TIMEOUT": True,  # Added for reliability
        },
    }
}

# --- Опционально: Хранение сессий в Redis ---
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "default"
# ------------------------------------------


# ========== PWA SETTINGS ==========
PWA_APP_NAME = 'AITU Visitor Pass'
PWA_APP_DESCRIPTION = "Система управления пропусками для Astana IT University"
PWA_APP_THEME_COLOR = '#206bc4' # Примерный синий цвет AITU, подберите точнее
PWA_APP_BACKGROUND_COLOR = '#ffffff' # Белый фон
PWA_APP_DISPLAY = 'standalone' # Как приложение будет отображаться (standalone, fullscreen, minimal-ui)
PWA_APP_ORIENTATION = 'any' # Предпочтительная ориентация (portrait, landscape, any)
PWA_APP_START_URL = '/' # Начальный URL при запуске из PWA
PWA_APP_SCOPE = '/' # Область действия PWA

# --- Иконки ---
PWA_APP_ICONS = [
    {
        'src': '/static/img/icons/icon-72x72.png',
        'sizes': '72x72'
    },
    {
        'src': '/static/img/icons/icon-96x96.png',
        'sizes': '96x96'
    },
    {
        'src': '/static/img/icons/icon-128x128.png',
        'sizes': '128x128'
    },
    {
        'src': '/static/img/icons/icon-144x144.png',
        'sizes': '144x144'
    },
    {
        'src': '/static/img/icons/icon-152x152.png',
        'sizes': '152x152'
    },
    {
        'src': '/static/img/icons/icon-192x192.png',
        'sizes': '192x192'
    },    {
        'src': '/static/img/icons/icon-384x384.png',
        'sizes': '384x384'
    },
    {
        'src': '/static/img/icons/icon-512x512.png',
        'sizes': '512x512'
    }
]
# Иконка для Apple Touch (необязательно, но рекомендуется)
PWA_APP_APPLE_TOUCH_ICON = '/static/img/icons/apple-touch-icon.png' # Размер 180x180 или похожий

# Splash screen (необязательно, но улучшает вид при запуске)
PWA_APP_SPLASH_SCREEN = [
    {
        'src': '/static/img/icons/splash-640x1136.png',
        'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
    }
]

# Настройки Service Worker
PWA_SERVICE_WORKER_PATH = os.path.join(BASE_DIR, 'static/js', 'serviceworker.js') # Путь к файлу service worker
PWA_APP_FETCH_URL_PATTERNS = []  # Упрощаем, чтобы избежать проблем совместимости
PWA_SERVICE_WORKER_EXCLUDE_URLS = []  # Не исключаем URL из обработки service worker
PWA_DEBUG = DEBUG  # Используем тот же флаг DEBUG, что и для Django

# Имя файла манифеста
PWA_MANIFEST_FILENAME = 'manifest.json'

# ===============================