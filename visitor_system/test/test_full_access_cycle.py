#!/usr/bin/env python
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Å–æ–∑–¥–∞–Ω–∏–µ Person ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ ‚Üí –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ access level
"""
import os
import django
import sys

# Setup Django
sys.path.insert(0, 'D:\\university_visitor_system\\visitor_system')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'visitor_system.settings')
django.setup()

from hikvision_integration.services import (
    HikCentralSession,
    ensure_person_hikcentral,
    upload_face_hikcentral,
    assign_access_level_to_person,
)
from hikvision_integration.models import HikCentralServer
from django.conf import settings

print("=" * 80)
print("–¢–ï–°–¢: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª - Person ‚Üí Photo ‚Üí Access Level")
print("=" * 80)

# –ü–æ–ª—É—á–∞–µ–º session
server = HikCentralServer.objects.filter(enabled=True).first()
if not server:
    print("‚ùå HikCentral Server –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    sys.exit(1)

session = HikCentralSession(server)
print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞\n")

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è
test_name = "–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á"
test_phone = "+77001234567"
test_photo_path = r'D:\university_visitor_system\visitor_system\media\guest_photos\pavel.jpg'

# –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º Person
print("üîπ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ Person –≤ HCP")
from datetime import datetime, timedelta

# –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: —Å–µ–π—á–∞—Å –¥–æ 22:00 —Å–µ–≥–æ–¥–Ω—è
now = datetime.now()
valid_from = now.strftime('%Y-%m-%dT%H:%M:%S+06:00')
end_time = now.replace(hour=22, minute=0, second=0)
valid_to = end_time.strftime('%Y-%m-%dT%H:%M:%S+06:00')

employee_no = f"{int(now.timestamp())}"  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã - –∏–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–æ–∫ —Å personCode

person_id = ensure_person_hikcentral(
    session,
    employee_no=employee_no,
    name=test_name,
    valid_from=valid_from,
    valid_to=valid_to
)

if not person_id:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Person")
    sys.exit(1)

print(f"‚úÖ Person —Å–æ–∑–¥–∞–Ω: ID={person_id}")
print(f"   Employee No: {employee_no}")
print(f"   Validity: {valid_from} ‚Üí {valid_to}\n")

# –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
print("üîπ –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ")
with open(test_photo_path, 'rb') as f:
    photo_bytes = f.read()

face_id = upload_face_hikcentral(
    session,
    face_lib_id='1',  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    image_bytes=photo_bytes,
    person_id=person_id
)

if not face_id or face_id.startswith('face_'):
    print(f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: face_id={face_id}")
else:
    print(f"‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: face_id={face_id}\n")

# –®–∞–≥ 3: –ù–∞–∑–Ω–∞—á–∞–µ–º access level
print("üîπ –®–∞–≥ 3: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ Access Level")
access_group_id = getattr(settings, 'HIKCENTRAL_GUEST_ACCESS_GROUP_ID', '7')
print(f"   Access Group ID: {access_group_id}")
print(f"   Person ID: {person_id}")

success = assign_access_level_to_person(
    session,
    person_id,
    access_group_id,
    access_type=1  # Access Control
)

if success:
    print("‚úÖ Access level —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!\n")
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å access level\n")
    sys.exit(1)

# –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("üîπ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Person –≤ HCP")
person_resp = session._make_request(
    'POST',
    '/artemis/api/resource/v1/person/personId/personInfo',
    data={'personId': str(person_id)}
)

person_data = person_resp.json()
if person_data.get('code') == '0':
    data = person_data.get('data', {})
    print(f"   –ò–º—è: {data.get('personName')}")
    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phoneNo')}")
    
    pic_uri = data.get('personPhoto', {}).get('picUri', '')
    if pic_uri:
        print(f"   ‚úÖ –§–æ—Ç–æ: {pic_uri}")
    else:
        print("   ‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
else:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {person_data.get('msg')}")

print("\n" + "=" * 80)
print("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
print("=" * 80)
print("\n–¢–µ–ø–µ—Ä—å –≥–æ—Å—Ç—å –º–æ–∂–µ—Ç:")
print("  1. ‚úÖ –ü—Ä–æ–π—Ç–∏ –ø–æ —Ç—É—Ä–Ω–∏–∫–µ—Ç—É (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞)")
print("  2. ‚úÖ –í–æ–π—Ç–∏ –≤ –∑–¥–∞–Ω–∏–µ")
print("  3. ‚úÖ –í—ã–π—Ç–∏ –∏–∑ –∑–¥–∞–Ω–∏—è")
print("  4. ‚úÖ –î–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å 09:00 –¥–æ 22:00")
print("\n‚ö†Ô∏è –í–ê–ñ–ù–û: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
print("   –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ /door/events")
print("=" * 80)

# –û—á–∏—Å—Ç–∫–∞
print("\n‚ùì –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è –∏–∑ HCP?")
response = input("   –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
if response.lower() == 'yes':
    try:
        del_resp = session._make_request(
            'POST',
            '/artemis/api/resource/v1/person/single/delete',
            data={'personId': str(person_id)}
        )
        del_result = del_resp.json()
        if del_result.get('code') == '0':
            print("   ‚úÖ Person —É–¥–∞–ª–µ–Ω")
        else:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {del_result.get('msg')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
else:
    print(f"   ‚ÑπÔ∏è Person —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID={person_id})")
