#!/usr/bin/env python
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç—è —Å HikCentral –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.
–°–æ–∑–¥–∞–µ—Ç –≥–æ—Å—Ç—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –≥–æ—Å—Ç—å –ø–æ—è–≤–∏–ª—Å—è –≤ HikCentral.
"""
import os
import sys
import time
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'visitor_system.conf.dev')
django.setup()

from django.contrib.auth import get_user_model
from django.utils import timezone
from visitors.models import Guest, Visit
from hikvision_integration.models import HikAccessTask, HikPersonBinding

User = get_user_model()

def test_guest_registration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–æ—Å—Ç—è."""
    print("=" * 70)
    print("–¢–ï–°–¢: –ü–æ–ª–Ω—ã–π flow —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç—è —Å HikCentral")
    print("=" * 70)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    host_user = User.objects.filter(is_staff=True).first()
    if not host_user:
        print("‚ùå ERROR: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å is_staff=True")
        return False
    
    print(f"\n‚úÖ Host user: {host_user.username}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç—è
    test_iin = "990101300000"  # –¢–µ—Å—Ç–æ–≤—ã–π –ò–ò–ù
    guest_name = f"Test Guest {int(time.time())}"
    
    print(f"\nüìù –°–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç—è: {guest_name}")
    print(f"   –ò–ò–ù: {test_iin}")
    
    guest = Guest.objects.create(
        full_name=guest_name,
        phone_number="+77771234567",
        email="test@example.com"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ò–ù —á–µ—Ä–µ–∑ setter property
    guest.iin = test_iin
    guest.save()
    
    print(f"‚úÖ Guest created: ID={guest.id}")
    
    # 3. –°–æ–∑–¥–∞–µ–º –≤–∏–∑–∏—Ç
    visit = Visit.objects.create(
        host=host_user,
        guest=guest,
        purpose="Test Visit",
        expected_entry_time=timezone.now(),
        status='SCHEDULED'
    )
    
    print(f"‚úÖ Visit created: ID={visit.id}, Status={visit.status}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏—Å—å HikAccessTask
    print("\n‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ HikAccessTask...")
    time.sleep(1)
    
    tasks = HikAccessTask.objects.filter(visit=visit)
    print(f"‚úÖ Found {tasks.count()} HikAccessTask records:")
    for task in tasks:
        print(f"   - Task {task.id}: {task.kind} - {task.status}")
    
    if tasks.count() == 0:
        print("‚ùå WARNING: HikAccessTask –Ω–µ —Å–æ–∑–¥–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ signals –∏–ª–∏ views.")
        return False
    
    # 5. –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    print("\n‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Celery –∑–∞–¥–∞—á (max 10 —Å–µ–∫—É–Ω–¥)...")
    max_wait = 10
    start_time = time.time()
    
    while time.time() - start_time < max_wait:
        tasks = HikAccessTask.objects.filter(visit=visit)
        statuses = [t.status for t in tasks]
        
        if all(s in ['completed', 'failed'] for s in statuses):
            break
        
        print(f"   –°—Ç–∞—Ç—É—Å—ã: {', '.join(statuses)}")
        time.sleep(2)
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:")
    tasks = HikAccessTask.objects.filter(visit=visit)
    for task in tasks:
        print(f"   - Task {task.id}: {task.kind} - {task.status}")
        if task.error_message:
            print(f"     Error: {task.error_message}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º HikPersonBinding
    bindings = HikPersonBinding.objects.filter(guest=guest)
    print(f"\nüìä HikPersonBinding records: {bindings.count()}")
    for binding in bindings:
        print(f"   - Guest {binding.guest_id} ‚Üí Person {binding.hik_person_id}")
    
    # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ Visit –ø–æ—è–≤–∏–ª—Å—è hikcentral_person_id
    visit.refresh_from_db()
    guest.refresh_from_db()
    
    print(f"\nüìä Visit {visit.id}:")
    print(f"   hikcentral_person_id: {visit.hikcentral_person_id}")
    
    print(f"\nüìä Guest {guest.id}:")
    print(f"   hikcentral_person_id: {guest.hikcentral_person_id}")
    
    # 9. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    success = (
        tasks.filter(status='completed').count() >= 1 and
        (visit.hikcentral_person_id or guest.hikcentral_person_id) and
        bindings.count() >= 1
    )
    
    if success:
        print("üéâ –£–°–ü–ï–•! –ì–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ HikCentral")
        print(f"   Person ID: {visit.hikcentral_person_id or guest.hikcentral_person_id}")
        print(f"   Visit ID: {visit.id}")
        print(f"   Guest ID: {guest.id}")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. Celery worker –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å 'hikvision'")
        print("   2. HikCentral –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   3. –õ–æ–≥–∏ Celery worker –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–æ–∫")
    
    print("=" * 70)
    return success

if __name__ == "__main__":
    try:
        success = test_guest_registration()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå EXCEPTION: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
