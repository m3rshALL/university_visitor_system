#!/usr/bin/env python
"""
üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ

–ù–ê–ô–î–ï–ù–ù–´–ô –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î:
Endpoint: POST /artemis/api/resource/v1/person/face/update
Parameters: personId + faceData (base64)
Image: Optimized to 500x500, JPEG quality 80
"""
import os
import sys
import django

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'visitor_system.settings')
django.setup()

from hikvision_integration.services import HikCentralSession, upload_face_hikcentral
from hikvision_integration.models import HikCentralServer
import base64
from PIL import Image
import io

print("=" * 80)
print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Ç–æ–¥–∞")
print("=" * 80)

# Get HCP server
server = HikCentralServer.objects.first()
session = HikCentralSession(server)

# Test person
test_person_id = "8505"
test_photo = r"D:\university_visitor_system\visitor_system\media\guest_photos\pavel.jpg"

print(f"\n‚úì Test person: {test_person_id}")
print(f"‚úì Test photo: {test_photo}")

# Load and optimize image
with open(test_photo, 'rb') as f:
    image_bytes = f.read()

print(f"‚úì Original image: {len(image_bytes)} bytes")

# Optimize exactly as in working test
img = Image.open(io.BytesIO(image_bytes))
if img.mode != 'RGB':
    img = img.convert('RGB')
img.thumbnail((500, 500), Image.Resampling.LANCZOS)
buffer = io.BytesIO()
img.save(buffer, format='JPEG', quality=80, optimize=True)
optimized_bytes = buffer.getvalue()

print(f"‚úì Optimized image: {len(optimized_bytes)} bytes (500x500, quality 80)")

# Encode
image_base64 = base64.b64encode(optimized_bytes).decode('utf-8')

print("\n" + "=" * 80)
print("üì§ Uploading photo with WORKING METHOD")
print("=" * 80)
print(f"\nEndpoint: /artemis/api/resource/v1/person/face/update")
print(f"Payload: personId={test_person_id}, faceData=<{len(image_base64)} chars>")

# Upload using working method
payload = {
    'personId': test_person_id,
    'faceData': image_base64
}

resp = session._make_request('POST', '/artemis/api/resource/v1/person/face/update', data=payload)
result = resp.json()

print(f"\nüìä Response:")
print(f"   code: {result.get('code')}")
print(f"   msg: {result.get('msg')}")

if result.get('code') == '0':
    print(f"\n‚úÖ Upload SUCCESS!")
    
    # Verify
    print(f"\nüîç Verifying photo was saved...")
    verify_resp = session._make_request(
        'POST',
        '/artemis/api/resource/v1/person/personId/personInfo',
        data={'personId': test_person_id}
    )
    verify_data = verify_resp.json().get('data', {})
    pic_uri = verify_data.get('personPhoto', {}).get('picUri', '')
    
    print(f"   picUri: '{pic_uri}'")
    
    if pic_uri:
        print(f"\nüéâüéâüéâ SUCCESS! PHOTO UPLOADED AND SAVED! üéâüéâüéâ")
        print(f"\n   Photo URI: {pic_uri}")
        print(f"\n‚úÖ –ú–ï–¢–û–î –†–ê–ë–û–¢–ê–ï–¢!!!")
    else:
        print(f"\n‚ö†Ô∏è Response OK but picUri empty (unexpected)")
else:
    print(f"\n‚ùå Upload failed: {result.get('msg')}")

print("\n" + "=" * 80)
print("üß™ Testing with updated function upload_face_hikcentral()")
print("=" * 80)

print("\nCalling upload_face_hikcentral()...")
result = upload_face_hikcentral(session, "1", image_bytes, test_person_id)

print(f"\nFunction returned: {result}")

# Final verification
verify_resp = session._make_request(
    'POST',
    '/artemis/api/resource/v1/person/personId/personInfo',
    data={'personId': test_person_id}
)
verify_data = verify_resp.json().get('data', {})
final_pic_uri = verify_data.get('personPhoto', {}).get('picUri', '')

print(f"\nüì∏ Final picUri: '{final_pic_uri}'")

if final_pic_uri:
    print(f"\n‚úÖ‚úÖ‚úÖ –ú–ï–¢–û–î –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢! ‚úÖ‚úÖ‚úÖ")
    print(f"\nüéâ –ü–æ—Å–ª–µ 16 —Ç–µ—Å—Ç–æ–≤ –º—ã –Ω–∞—à–ª–∏ –†–ê–ë–û–ß–ò–ô —Å–ø–æ—Å–æ–±!")
    print(f"\nüìã –†–ê–ë–û–ß–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"   ‚Ä¢ Endpoint: /person/face/update")
    print(f"   ‚Ä¢ Parameters: personId + faceData")
    print(f"   ‚Ä¢ Image size: 500x500 pixels")
    print(f"   ‚Ä¢ Image quality: JPEG 80")
    print(f"   ‚Ä¢ NO userId, NO personCode, NO other fields!")
else:
    print(f"\n‚ö†Ô∏è Unexpected: picUri still empty")

print("\n" + "=" * 80)
print("üìù SUMMARY")
print("=" * 80)
print(f"""
–ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î (#16 –∏–∑ 16 –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö!)

‚úÖ Endpoint: POST /artemis/api/resource/v1/person/face/update
‚úÖ Parameters: personId (string) + faceData (base64 string)
‚úÖ Image optimization: 500x500, JPEG quality 80
‚úÖ Result: Photo uploaded and saved successfully!

‚ùå –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç:
   ‚Ä¢ /person/single/update (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç)
   ‚Ä¢ Multipart endpoints (code=8 not supported)
   ‚Ä¢ ISAPI direct (statusCode=4 notSupport)
   ‚Ä¢ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 14 –º–µ—Ç–æ–¥–æ–≤

üí° –ö–õ–Æ–ß–ï–í–û–ô –§–ê–ö–¢–û–†: 
   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 500x500 + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint!
   
üéØ –°–¢–ê–¢–£–°: –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –õ–∏—Ü–µ–Ω–∑–∏—è –ù–ï –Ω—É–∂–Ω–∞!
""")
