#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Celery worker —Å HikCentral –∑–∞–¥–∞—á–∞–º–∏.
"""
import os
import sys
import time
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'visitor_system.conf.dev')
django.setup()

from hikvision_integration.models import HikAccessTask
from hikvision_integration.tasks import enroll_face_task

def test_celery_task():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."""
    print("=" * 70)
    print("–¢–ï–°–¢: Celery Worker + HikCentral –∑–∞–¥–∞—á–∏")
    print("=" * 70)
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é HikAccessTask
    print("\nüìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é HikAccessTask...")
    task = HikAccessTask.objects.create(
        kind='enroll_face',
        status='queued'
    )
    print(f"‚úÖ Task created: ID={task.id}, Status={task.status}")
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Celery
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Celery (queue=hikvision)...")
    result = enroll_face_task.apply_async(args=[task.id], queue='hikvision')
    print(f"‚úÖ Task sent: {result.id}")
    
    # 3. –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print(f"\n‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (max 10 —Å–µ–∫—É–Ω–¥)...")
    max_wait = 10
    start_time = time.time()
    
    while time.time() - start_time < max_wait:
        task.refresh_from_db()
        print(f"   Status: {task.status}")
        
        if task.status in ['completed', 'failed']:
            break
        
        time.sleep(1)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    task.refresh_from_db()
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {task.status}")
    
    if task.error_message:
        print(f"   Error: {task.error_message}")
    
    # 5. –ò—Ç–æ–≥
    print("\n" + "=" * 70)
    if task.status == 'completed':
        print("üéâ –£–°–ü–ï–•! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return True
    elif task.status == 'failed':
        print("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏)")
        print("   –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ worker –ü–û–õ–£–ß–ò–õ –∏ –û–ë–†–ê–ë–û–¢–ê–õ –∑–∞–¥–∞—á—É!")
        return True
    else:
        print("‚ùå –û–®–ò–ë–ö–ê! –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Celery worker –∑–∞–ø—É—â–µ–Ω:")
        print("   cd d:\\university_visitor_system && start_celery.bat")
        return False
    
    print("=" * 70)

if __name__ == "__main__":
    try:
        success = test_celery_task()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå EXCEPTION: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
