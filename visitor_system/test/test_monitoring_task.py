"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ö–æ–¥–æ–≤ –≥–æ—Å—Ç–µ–π.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ —Å access_granted=True
2. –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π door events —á–µ—Ä–µ–∑ API
3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ö–æ–¥–æ–≤
4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã—Ö–æ–¥–∞
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'visitor_system.conf.dev')
django.setup()

from django.utils import timezone
from datetime import timedelta
from visitors.models import Visit
from hikvision_integration.services import HikCentralSession, get_door_events


def test_monitoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–•–û–î–û–í –ì–û–°–¢–ï–ô")
    print("="*80 + "\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑–∏—Ç—ã
    print("1Ô∏è‚É£ –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º...")
    active_visits = Visit.objects.filter(
        access_granted=True,
        access_revoked=False,
        status__in=['EXPECTED', 'CHECKED_IN']
    ).select_related('guest')
    
    if not active_visits.exists():
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º")
        print("\n–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç —á–µ—Ä–µ–∑:")
        print("  poetry run python test_full_access_cycle.py")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤: {active_visits.count()}")
    
    for visit in active_visits:
        print(f"\nüìã Visit ID: {visit.id}")
        print(f"   Guest: {visit.guest.full_name}")
        print(f"   Status: {visit.status}")
        print(f"   Access granted: {visit.access_granted}")
        print(f"   Access revoked: {visit.access_revoked}")
        print(f"   Entry count: {visit.entry_count}")
        print(f"   Exit count: {visit.exit_count}")
        if visit.first_entry_detected:
            print(f"   First entry: {visit.first_entry_detected}")
        if visit.first_exit_detected:
            print(f"   First exit: {visit.first_exit_detected}")
    
    # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ HikCentral
    print("\n2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HikCentral...")
    
    from hikvision_integration.models import HikCentralServer
    
    server = HikCentralServer.objects.filter(enabled=True).first()
    if not server:
        print("‚ùå HikCentral Server –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    session = HikCentralSession(server)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ HikCentral")
    
    # 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–∑–∏—Ç–∞
    print("\n3Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ API...")
    
    now = timezone.now()
    start_time = now - timedelta(hours=24)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    
    for visit in active_visits:
        # –ü–æ–ª—É—á–∞–µ–º person_id –∏–∑ visit
        if not visit.hikcentral_person_id:
            print(f"\n‚ùå Visit {visit.id}: No hikcentral_person_id")
            continue
        
        person_id = str(visit.hikcentral_person_id)
        
        print(f"\nüì° –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –¥–ª—è person_id={person_id}...")
        
        try:
            events_data = get_door_events(
                session,
                person_id=person_id,
                person_name=None,
                start_time=start_time.isoformat(),
                end_time=now.isoformat(),
                door_index_codes=None,
                event_type=None,
                page_no=1,
                page_size=100
            )
            
            if not events_data or 'list' not in events_data:
                print("   ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ö–æ–¥–∞—Ö")
                continue
            
            events = events_data.get('list', [])
            total_count = events_data.get('total', 0)
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {total_count}")
            
            if events:
                print("\n   üìä –°–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ö–æ–¥–æ–≤:")
                for idx, event in enumerate(events[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    event_type = event.get('eventType')
                    event_time = event.get('eventTime')
                    door_name = event.get('doorName', 'Unknown')
                    event_type_name = '–í–•–û–î' if event_type == 1 else '–í–´–•–û–î' if event_type == 2 else f'TYPE_{event_type}'
                    
                    print(f"      {idx}. {event_time} | {event_type_name} | {door_name}")
                
                if len(events) > 10:
                    print(f"      ... –∏ –µ—â—ë {len(events) - 10} —Å–æ–±—ã—Ç–∏–π")
            else:
                print("   ‚ÑπÔ∏è  –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–±—ã—Ç–∏–π: {e}")
            import traceback
            traceback.print_exc()
    
    # 4. –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ (–≤—Ä—É—á–Ω—É—é)
    print("\n4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤...")
    print("   (–í —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ —Å—á—ë—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    
    print("\n" + "="*80)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
    print("="*80)
    print("\nüí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Celery Beat:")
    print("   poetry run celery -A visitor_system beat --loglevel=info")
    print("\nüí° –ò Celery Worker:")
    print("   poetry run celery -A visitor_system worker --loglevel=info -Q hikvision")
    print()


if __name__ == '__main__':
    test_monitoring()
