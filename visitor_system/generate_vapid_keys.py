#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VAPID –∫–ª—é—á–µ–π –¥–ª—è WebPush —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""


import os
from py_vapid import Vapid
import base64

def generate_vapid_keys():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VAPID –∫–ª—é—á–∏ –¥–ª—è WebPush —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    print("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VAPID –∫–ª—é—á–µ–π –¥–ª—è WebPush...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Vapid
        vapid = Vapid()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
        vapid.generate_keys()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        private_key_bytes = vapid.private_key.private_bytes(
            encoding=vapid.private_key.private_bytes.__defaults__[0],  # serialization.Encoding.PEM
            format=vapid.private_key.private_bytes.__defaults__[1],    # serialization.PrivateFormat.PKCS8
            encryption_algorithm=vapid.private_key.private_bytes.__defaults__[2]  # serialization.NoEncryption()
        )
        
        public_key_bytes = vapid.public_key.public_bytes(
            encoding=vapid.public_key.public_bytes.__defaults__[0],  # serialization.Encoding.PEM
            format=vapid.public_key.public_bytes.__defaults__[1]     # serialization.PublicFormat.SubjectPublicKeyInfo
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64url —Ñ–æ—Ä–º–∞—Ç –¥–ª—è WebPush
        private_key_b64 = base64.urlsafe_b64encode(private_key_bytes).decode('utf-8').rstrip('=')
        public_key_b64 = base64.urlsafe_b64encode(public_key_bytes).decode('utf-8').rstrip('=')
        
        print("‚úÖ VAPID –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        print("\n" + "="*60)
        print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª:")
        print("="*60)
        print(f"VAPID_PRIVATE_KEY={private_key_b64}")
        print(f"VAPID_PUBLIC_KEY={public_key_b64}")
        print(f"VAPID_ADMIN_EMAIL=maroccocombo@gmail.com")
        print("="*60)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        env_path = os.path.join('visitor_system', 'visitor_system', 'conf', '.env')
        if os.path.exists(env_path):
            update_env_file(env_path, private_key_b64, public_key_b64)
        else:
            print(f"\n‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {env_path}")
            print("–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.")
        
        return private_key_b64, public_key_b64
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
        print("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:")
        return generate_vapid_keys_alternative()

def generate_vapid_keys_alternative():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    """
    try:
        from cryptography.hazmat.primitives import serialization
        from cryptography.hazmat.primitives.asymmetric import ec
        from cryptography.hazmat.backends import default_backend
        import base64
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
        public_key = private_key.public_key()
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏
        private_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )
        
        public_pem = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        private_key_b64 = base64.urlsafe_b64encode(private_pem).decode('utf-8').rstrip('=')
        public_key_b64 = base64.urlsafe_b64encode(public_pem).decode('utf-8').rstrip('=')
        
        print("‚úÖ VAPID –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!")
        print("\n" + "="*60)
        print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª:")
        print("="*60)
        print(f"VAPID_PRIVATE_KEY={private_key_b64}")
        print(f"VAPID_PUBLIC_KEY={public_key_b64}")
        print(f"VAPID_ADMIN_EMAIL=maroccocombo@gmail.com")
        print("="*60)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        env_path = os.path.join('visitor_system', 'visitor_system', 'conf', '.env')
        if os.path.exists(env_path):
            update_env_file(env_path, private_key_b64, public_key_b64)
        
        return private_key_b64, public_key_b64
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Å–ø–æ—Å–æ–±–µ: {e}")
        return None, None

def update_env_file(env_path, private_key, public_key):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ VAPID –∫–ª—é—á–∞–º–∏
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        with open(env_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–∞–º–∏
        updated_lines = []
        private_updated = False
        public_updated = False
        
        for line in lines:
            if line.startswith('VAPID_PRIVATE_KEY='):
                updated_lines.append(f'VAPID_PRIVATE_KEY={private_key}\n')
                private_updated = True
            elif line.startswith('VAPID_PUBLIC_KEY='):
                updated_lines.append(f'VAPID_PUBLIC_KEY={public_key}\n')
                public_updated = True
            else:
                updated_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ
        if not private_updated:
            updated_lines.append(f'VAPID_PRIVATE_KEY={private_key}\n')
        if not public_updated:
            updated_lines.append(f'VAPID_PUBLIC_KEY={public_key}\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(env_path, 'w', encoding='utf-8') as file:
            file.writelines(updated_lines)
        
        print(f"\n‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {env_path}")
        
    except Exception as e:
        print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")
        print("–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.")

if __name__ == "__main__":
    generate_vapid_keys()
