"""
Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HikVision/HikCentral –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.

–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –û—Ç–ø—Ä–∞–≤–∫–∏ security alerts
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
"""

import logging
from typing import Optional
from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils import timezone

logger = logging.getLogger(__name__)


def send_security_alert_async(incident_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ security alert –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Celery task –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email/SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    
    Args:
        incident_id: ID SecurityIncident
    """
    try:
        from .tasks import send_security_alert_task
        send_security_alert_task.apply_async(
            args=[incident_id],
            countdown=5  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
        )
        logger.info(f"Security alert task scheduled for incident {incident_id}")
    except Exception as e:
        logger.error(f"Failed to schedule security alert task: {e}")
        # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try:
            send_security_alert_sync(incident_id)
        except Exception as sync_exc:
            logger.error(f"Failed to send security alert sync: {sync_exc}")


def send_security_alert_sync(incident_id: int):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ security alert.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –µ—Å–ª–∏ Celery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
    
    Args:
        incident_id: ID SecurityIncident
    """
    try:
        from visitors.models import SecurityIncident
        
        incident = SecurityIncident.objects.select_related(
            'visit__guest', 'visit__employee', 'visit__department'
        ).get(id=incident_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω alert
        if incident.alert_sent:
            logger.info(f"Alert for incident {incident_id} already sent, skipping")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_admins = _get_security_admin_emails()
        
        if not security_admins:
            logger.warning("No security admins configured, skipping alert")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –∏ —Ç–µ–∫—Å—Ç email
        subject = f'üö® Security Alert: {incident.get_incident_type_display()}'
        
        context = {
            'incident': incident,
            'visit': incident.visit,
            'guest': incident.visit.guest,
            'site_url': getattr(settings, 'SITE_URL', 'http://localhost:8000'),
        }
        
        # HTML email
        html_message = render_to_string('notifications/email/security_alert.html', context)
        
        # Plain text fallback
        plain_message = f"""
SECURITY ALERT

–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {incident.get_incident_type_display()}
–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: {incident.get_severity_display()}
–°—Ç–∞—Ç—É—Å: {incident.get_status_display()}

–ì–æ—Å—Ç—å: {incident.visit.guest.full_name}
–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π: {incident.visit.employee.get_full_name() if incident.visit.employee else 'N/A'}
–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {incident.visit.department.name if incident.visit.department else 'N/A'}

–û–ø–∏—Å–∞–Ω–∏–µ:
{incident.description}

–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {incident.detected_at.strftime('%Y-%m-%d %H:%M:%S')}

---
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        send_mail(
            subject=subject,
            message=plain_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=security_admins,
            html_message=html_message,
            fail_silently=False,
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º incident
        incident.alert_sent = True
        incident.alert_sent_at = timezone.now()
        incident.save(update_fields=['alert_sent', 'alert_sent_at'])
        
        logger.info(
            f"Security alert sent for incident {incident_id} "
            f"to {len(security_admins)} recipients"
        )
        
    except Exception as e:
        logger.error(f"Failed to send security alert for incident {incident_id}: {e}")
        import traceback
        traceback.print_exc()


def _get_security_admin_emails() -> list[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ email –∞–¥—Ä–µ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    
    Returns:
        –°–ø–∏—Å–æ–∫ email –∞–¥—Ä–µ—Å–æ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ settings
    security_emails = getattr(settings, 'SECURITY_ADMIN_EMAILS', [])
    
    if security_emails:
        return security_emails
    
    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º ADMINS
    from django.conf import settings as django_settings
    admins = getattr(django_settings, 'ADMINS', [])
    
    if admins:
        return [email for name, email in admins]
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try:
        from django.contrib.auth import get_user_model
        User = get_user_model()
        superusers = User.objects.filter(
            is_superuser=True,
            is_active=True,
            email__isnull=False
        ).exclude(email='')
        
        return list(superusers.values_list('email', flat=True))
    except Exception as e:
        logger.error(f"Failed to get superuser emails: {e}")
        return []


def format_duration(seconds: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    
    Args:
        seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "2 —á 30 –º–∏–Ω" –∏–ª–∏ "45 –º–∏–Ω"
    """
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    
    if hours > 0:
        return f"{hours} —á {minutes} –º–∏–Ω"
    else:
        return f"{minutes} –º–∏–Ω"


def get_work_hours() -> tuple[int, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∏–∑ settings.
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (start_hour, end_hour)
    """
    start = getattr(settings, 'WORK_HOURS_START', 6)
    end = getattr(settings, 'WORK_HOURS_END', 22)
    return start, end


def is_work_hours(dt: Optional[timezone.datetime] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö.
    
    Args:
        dt: –î–∞—Ç–∞/–≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
        
    Returns:
        True –µ—Å–ª–∏ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö, –∏–Ω–∞—á–µ False
    """
    if dt is None:
        dt = timezone.now()
    
    start, end = get_work_hours()
    hour = dt.hour
    
    return start <= hour < end

