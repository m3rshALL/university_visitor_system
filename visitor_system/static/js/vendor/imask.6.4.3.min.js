(function(global){
  if (global.IMask) return;
  function SimplePhoneMask(element, options){
    this.el = element;
    this._unmasked = '';
    this._acceptCb = null;

    var self = this;

    function digitsOnly(value){
      return String(value || '').replace(/\D/g, '');
    }

    function formatPhone(unmasked){
      var d = digitsOnly(unmasked).slice(0, 10);
      self._unmasked = d;
      var a = d.slice(0,3), b = d.slice(3,6), c = d.slice(6,8), e = d.slice(8,10);
      var out = '+7 (' + a;
      if (a.length === 3) out += ') ' + b; else return '+7 (' + a;
      if (b.length === 3) out += ' ' + c; else return '+7 (' + a + ') ' + b;
      if (c.length === 2) out += ' ' + e; else return '+7 (' + a + ') ' + b + ' ' + c;
      return out;
    }

    function handleInput(){
      var raw = digitsOnly(self.el.value);
      self.el.value = formatPhone(raw);
      if (typeof self._acceptCb === 'function') {
        try { self._acceptCb(); } catch(_){ }
      }
    }

    if (element && options && typeof options.mask !== 'undefined'){
      // Initialize current value
      self.el.value = formatPhone(self.el.value);
      self.el.addEventListener('input', handleInput);
      self.el.addEventListener('blur', handleInput);
      self.el.addEventListener('change', handleInput);
    }

    this.on = function(eventName, callback){
      if (eventName === 'accept') { self._acceptCb = callback; }
      return self;
    };

    Object.defineProperty(this, 'unmaskedValue', {
      get: function(){ return self._unmasked; },
      set: function(v){ self.el.value = formatPhone(v); }
    });
  }

  global.IMask = function(element, options){
    return new SimplePhoneMask(element, options || {});
  };
})(window);


