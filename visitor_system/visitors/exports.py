"""
–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ –≤ PDF –∏ Excel.
"""

import logging
from datetime import datetime, timedelta
from io import BytesIO

from django.http import HttpResponse
from django.template.loader import render_to_string
from django.utils import timezone
from django.db.models import Count, Q
from django.contrib.auth.decorators import login_required, permission_required

from visitors.models import Visit, AuditLog, SecurityIncident

logger = logging.getLogger(__name__)


# ==================== HELPER FUNCTIONS ====================

def get_auto_checkin_data(days=7):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Auto Check-in Dashboard.
    """
    end_date = timezone.now()
    start_date = end_date - timedelta(days=days)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ check-in/out –∑–∞ –ø–µ—Ä–∏–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º AuditLog)
    auto_checkins = AuditLog.objects.filter(
        model='Visit',
        action=AuditLog.ACTION_UPDATE,
        user_agent='HikCentral FaceID System',
        created_at__gte=start_date,
        created_at__lte=end_date,
        changes__reason='Auto check-in via FaceID turnstile'
    ).order_by('-created_at')
    
    auto_checkouts = AuditLog.objects.filter(
        model='Visit',
        action=AuditLog.ACTION_UPDATE,
        user_agent='HikCentral FaceID System',
        created_at__gte=start_date,
        created_at__lte=end_date,
        changes__reason='Auto checkout via FaceID turnstile'
    ).order_by('-created_at')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_auto_checkins = auto_checkins.count()
    total_auto_checkouts = auto_checkouts.count()
    
    # –ê–Ω–æ–º–∞–ª–∏–∏
    incidents = SecurityIncident.objects.filter(
        detected_at__gte=start_date,
        detected_at__lte=end_date
    ).select_related('visit__guest', 'visit__employee').order_by('-detected_at')
    
    return {
        'auto_checkins': auto_checkins[:100],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100
        'auto_checkouts': auto_checkouts[:100],
        'total_auto_checkins': total_auto_checkins,
        'total_auto_checkouts': total_auto_checkouts,
        'incidents': incidents[:50],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
        'start_date': start_date,
        'end_date': end_date,
        'days': days,
    }


def get_security_incidents_data(days=30, status=None, incident_type=None, severity=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Security Incidents Dashboard.
    """
    end_date = timezone.now()
    start_date = end_date - timedelta(days=days)
    
    # –ë–∞–∑–æ–≤—ã–π queryset
    incidents = SecurityIncident.objects.select_related(
        'visit__guest', 'visit__employee', 'visit__department', 'assigned_to'
    ).filter(
        detected_at__gte=start_date,
        detected_at__lte=end_date
    )
    
    # –§–∏–ª—å—Ç—Ä—ã
    if status:
        incidents = incidents.filter(status=status)
    if incident_type:
        incidents = incidents.filter(incident_type=incident_type)
    if severity:
        incidents = incidents.filter(severity=severity)
    
    incidents = incidents.order_by('-detected_at')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': incidents.count(),
        'by_severity': incidents.values('severity').annotate(count=Count('id')),
        'by_type': incidents.values('incident_type').annotate(count=Count('id')),
        'by_status': incidents.values('status').annotate(count=Count('id')),
    }
    
    return {
        'incidents': incidents,
        'stats': stats,
        'start_date': start_date,
        'end_date': end_date,
        'days': days,
    }


def get_hikcentral_data():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è HikCentral Dashboard.
    """
    from hikvision_integration.services import HikCentralServer
    from django.conf import settings
    
    try:
        hc_server = HikCentralServer.objects.first()
        
        if not hc_server:
            return {'error': 'HikCentral server not configured'}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        last_24h = timezone.now() - timedelta(hours=24)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        stats = {
            'server_name': hc_server.name,
            'server_url': hc_server.base_url,
            'is_active': hc_server.is_active,
            'faces_enrolled_24h': Visit.objects.filter(
                hikcentral_person_id__isnull=False,
                registered_at__gte=last_24h
            ).count(),
            'access_granted_24h': Visit.objects.filter(
                access_granted=True,
                registered_at__gte=last_24h
            ).count(),
            'auto_actions_24h': AuditLog.objects.filter(
                model='Visit',
                action=AuditLog.ACTION_UPDATE,
                user_agent='HikCentral FaceID System',
                created_at__gte=last_24h
            ).count(),
        }
        
        return stats
        
    except Exception as e:
        logger.error(f"Error getting HikCentral data: {e}", exc_info=True)
        return {'error': str(e)}


# ==================== PDF EXPORT VIEWS ====================

@login_required
@permission_required('visitors.view_visit', raise_exception=True)
def export_auto_checkin_pdf(request):
    """
    –≠–∫—Å–ø–æ—Ä—Ç Auto Check-in Dashboard –≤ PDF.
    """
    try:
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib import colors
        from reportlab.lib.units import inch
        from io import BytesIO
        
        days = int(request.GET.get('days', 7))
        data = get_auto_checkin_data(days=days)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AuditLog –¥–∞–Ω–Ω—ã–µ –¥–ª—è PDF
        processed_checkins = []
        for log in data['auto_checkins']:
            try:
                visit = Visit.objects.select_related('guest', 'employee', 'department').get(id=log.object_id)
                processed_checkins.append([
                    log.created_at.strftime('%d.%m.%Y %H:%M'),
                    visit.guest.full_name if visit.guest else '-',
                    visit.employee.get_full_name() if visit.employee else '-',
                    visit.department.name if visit.department else '-',
                ])
            except Visit.DoesNotExist:
                pass
        
        processed_checkouts = []
        for log in data['auto_checkouts']:
            try:
                visit = Visit.objects.select_related('guest', 'employee', 'department').get(id=log.object_id)
                processed_checkouts.append([
                    log.created_at.strftime('%d.%m.%Y %H:%M'),
                    visit.guest.full_name if visit.guest else '-',
                    visit.employee.get_full_name() if visit.employee else '-',
                    visit.department.name if visit.department else '-',
                ])
            except Visit.DoesNotExist:
                pass
        
        # –°–æ–∑–¥–∞–µ–º PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,  # CENTER
        )
        story.append(Paragraph('üìä Auto Check-in Dashboard Report', title_style))
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta_style = ParagraphStyle(
            'Meta',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=20,
            alignment=1,  # CENTER
        )
        meta_text = f"""
        <b>–ü–µ—Ä–∏–æ–¥:</b> {data['start_date'].strftime('%d.%m.%Y %H:%M')} - {data['end_date'].strftime('%d.%m.%Y %H:%M')} ({data['days']} –¥–Ω–µ–π)<br/>
        <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {timezone.now().strftime('%d.%m.%Y %H:%M:%S')}<br/>
        <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {request.user.get_full_name() or request.user.username}
        """
        story.append(Paragraph(meta_text, meta_style))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_data = [
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ö–æ–¥–æ–≤', str(data['total_auto_checkins'])],
            ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ö–æ–¥–æ–≤', str(data['total_auto_checkouts'])],
            ['–ê–Ω–æ–º–∞–ª–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ', str(len(data['incidents']))],
        ]
        
        stats_table = Table(stats_data, colWidths=[3*inch, 2*inch])
        stats_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(Paragraph('<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>', styles['Heading2']))
        story.append(stats_table)
        story.append(Spacer(1, 20))
        
        # –¢–∞–±–ª–∏—Ü–∞ Check-ins
        if processed_checkins:
            story.append(Paragraph('<b>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ Check-ins</b>', styles['Heading2']))
            checkins_data = [['–î–∞—Ç–∞/–í—Ä–µ–º—è', '–ì–æ—Å—Ç—å', '–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π', '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç']] + processed_checkins[:50]
            
            checkins_table = Table(checkins_data, colWidths=[1.5*inch, 2*inch, 2*inch, 1.5*inch])
            checkins_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(checkins_table)
            story.append(Spacer(1, 20))
        
        # –¢–∞–±–ª–∏—Ü–∞ Check-outs
        if processed_checkouts:
            story.append(Paragraph('<b>üö™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ Check-outs</b>', styles['Heading2']))
            checkouts_data = [['–î–∞—Ç–∞/–í—Ä–µ–º—è', '–ì–æ—Å—Ç—å', '–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π', '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç']] + processed_checkouts[:50]
            
            checkouts_table = Table(checkouts_data, colWidths=[1.5*inch, 2*inch, 2*inch, 1.5*inch])
            checkouts_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightcoral),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(checkouts_table)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        doc.build(story)
        pdf = buffer.getvalue()
        buffer.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º response
        response = HttpResponse(pdf, content_type='application/pdf')
        filename = f'auto_checkin_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf'
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        logger.info(f"Auto Check-in PDF exported by {request.user.username}")
        return response
        
    except ImportError:
        logger.error("ReportLab not installed")
        return HttpResponse(
            "ReportLab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run pip install reportlab",
            status=500
        )
    except Exception as e:
        logger.error(f"Error exporting Auto Check-in PDF: {e}", exc_info=True)
        return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF: {e}", status=500)


@login_required
@permission_required('visitors.view_securityincident', raise_exception=True)
def export_security_incidents_pdf(request):
    """
    –≠–∫—Å–ø–æ—Ä—Ç Security Incidents Dashboard –≤ PDF.
    """
    try:
        from reportlab.lib.pagesizes import A4, landscape
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib import colors
        from reportlab.lib.units import inch
        from io import BytesIO
        
        days = int(request.GET.get('days', 30))
        status = request.GET.get('status')
        incident_type = request.GET.get('incident_type')
        severity = request.GET.get('severity')
        
        data = get_security_incidents_data(
            days=days,
            status=status,
            incident_type=incident_type,
            severity=severity
        )
        
        # –°–æ–∑–¥–∞–µ–º PDF (landscape –¥–ª—è —à–∏—Ä–æ–∫–∏—Ö —Ç–∞–±–ª–∏—Ü)
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=landscape(A4))
        styles = getSampleStyleSheet()
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,  # CENTER
        )
        story.append(Paragraph('üö® Security Incidents Report', title_style))
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta_style = ParagraphStyle(
            'Meta',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=20,
            alignment=1,  # CENTER
        )
        meta_text = f"""
        <b>–ü–µ—Ä–∏–æ–¥:</b> {data['start_date'].strftime('%d.%m.%Y %H:%M')} - {data['end_date'].strftime('%d.%m.%Y %H:%M')} ({data['days']} –¥–Ω–µ–π)<br/>
        <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {timezone.now().strftime('%d.%m.%Y %H:%M:%S')}<br/>
        <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {request.user.get_full_name() or request.user.username}
        """
        story.append(Paragraph(meta_text, meta_style))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_data = [
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            ['–í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤', str(data['stats']['total'])],
        ]
        
        for stat in data['stats']['by_severity']:
            stats_data.append([f"–£—Ä–æ–≤–µ–Ω—å {stat['severity'].upper()}", str(stat['count'])])
        
        stats_table = Table(stats_data, colWidths=[3*inch, 2*inch])
        stats_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.red),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(Paragraph('<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>', styles['Heading2']))
        story.append(stats_table)
        story.append(Spacer(1, 20))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        if data['incidents']:
            story.append(Paragraph('<b>üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤</b>', styles['Heading2']))
            
            incidents_data = [['–î–∞—Ç–∞', '–¢–∏–ø', '–£—Ä–æ–≤–µ–Ω—å', '–°—Ç–∞—Ç—É—Å', '–ì–æ—Å—Ç—å', '–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π', '–û–ø–∏—Å–∞–Ω–∏–µ']]
            
            for incident in data['incidents'][:100]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 100 –∑–∞–ø–∏—Å—è–º–∏
                incidents_data.append([
                    incident.detected_at.strftime('%d.%m.%y %H:%M'),
                    incident.get_incident_type_display(),
                    incident.get_severity_display(),
                    incident.get_status_display(),
                    incident.visit.guest.full_name if incident.visit and incident.visit.guest else '-',
                    incident.visit.employee.get_full_name() if incident.visit and incident.visit.employee else '-',
                    incident.description[:50] + '...' if len(incident.description) > 50 else incident.description,
                ])
            
            incidents_table = Table(incidents_data, colWidths=[1*inch, 1.5*inch, 1*inch, 1*inch, 1.5*inch, 1.5*inch, 2.5*inch])
            incidents_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.red),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 9),
                ('FONTSIZE', (0, 1), (-1, -1), 7),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ]))
            story.append(incidents_table)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        doc.build(story)
        pdf = buffer.getvalue()
        buffer.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º response
        response = HttpResponse(pdf, content_type='application/pdf')
        filename = f'security_incidents_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf'
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        logger.info(f"Security Incidents PDF exported by {request.user.username}")
        return response
        
    except ImportError:
        return HttpResponse(
            "ReportLab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run pip install reportlab",
            status=500
        )
    except Exception as e:
        logger.error(f"Error exporting Security Incidents PDF: {e}", exc_info=True)
        return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF: {e}", status=500)


@login_required
@permission_required('visitors.view_visit', raise_exception=True)
def export_hikcentral_pdf(request):
    """
    –≠–∫—Å–ø–æ—Ä—Ç HikCentral Dashboard –≤ PDF.
    """
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib import colors
        from reportlab.lib.units import inch
        from io import BytesIO
        
        data = get_hikcentral_data()
        
        # –°–æ–∑–¥–∞–µ–º PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,  # CENTER
        )
        story.append(Paragraph('üîå HikCentral Status Report', title_style))
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta_style = ParagraphStyle(
            'Meta',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=20,
            alignment=1,  # CENTER
        )
        meta_text = f"""
        <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {timezone.now().strftime('%d.%m.%Y %H:%M:%S')}<br/>
        <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {request.user.get_full_name() or request.user.username}
        """
        story.append(Paragraph(meta_text, meta_style))
        
        if 'error' in data:
            # –û—à–∏–±–∫–∞
            error_style = ParagraphStyle(
                'Error',
                parent=styles['Normal'],
                fontSize=12,
                spaceAfter=20,
                alignment=1,  # CENTER
                textColor=colors.red,
            )
            story.append(Paragraph(f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {data["error"]}', error_style))
        else:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
            story.append(Paragraph('<b>üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</b>', styles['Heading2']))
            
            server_data = [
                ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                ['–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞', data.get('server_name', '-')],
                ['URL', data.get('server_url', '-')],
                ['–°—Ç–∞—Ç—É—Å', '–ê–∫—Ç–∏–≤–µ–Ω' if data.get('is_active') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'],
            ]
            
            server_table = Table(server_data, colWidths=[3*inch, 3*inch])
            server_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(server_table)
            story.append(Spacer(1, 20))
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞
            story.append(Paragraph('<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b>', styles['Heading2']))
            
            activity_data = [
                ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                ['–õ–∏—Ü –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ', str(data.get('faces_enrolled_24h', 0))],
                ['–î–æ—Å—Ç—É–ø–æ–≤ –≤—ã–¥–∞–Ω–æ', str(data.get('access_granted_24h', 0))],
                ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π', str(data.get('auto_actions_24h', 0))],
            ]
            
            activity_table = Table(activity_data, colWidths=[3*inch, 2*inch])
            activity_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(activity_table)
            story.append(Spacer(1, 20))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
            info_style = ParagraphStyle(
                'Info',
                parent=styles['Normal'],
                fontSize=10,
                spaceAfter=20,
                leftIndent=20,
                rightIndent=20,
                borderColor=colors.lightblue,
                borderWidth=1,
                borderPadding=10,
            )
            info_text = """
            <b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b><br/>
            –î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å HikCentral Professional.<br/>
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.<br/>
            –î–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å HikCentral Dashboard.
            """
            story.append(Paragraph(info_text, info_style))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        doc.build(story)
        pdf = buffer.getvalue()
        buffer.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º response
        response = HttpResponse(pdf, content_type='application/pdf')
        filename = f'hikcentral_status_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf'
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        logger.info(f"HikCentral PDF exported by {request.user.username}")
        return response
        
    except ImportError:
        return HttpResponse(
            "ReportLab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run pip install reportlab",
            status=500
        )
    except Exception as e:
        logger.error(f"Error exporting HikCentral PDF: {e}", exc_info=True)
        return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF: {e}", status=500)


# ==================== EXCEL EXPORT VIEWS ====================

@login_required
@permission_required('visitors.view_visit', raise_exception=True)
def export_auto_checkin_excel(request):
    """
    –≠–∫—Å–ø–æ—Ä—Ç Auto Check-in Dashboard –≤ Excel.
    """
    try:
        import pandas as pd
        from openpyxl import Workbook
        from openpyxl.styles import Font, PatternFill, Alignment
        
        days = int(request.GET.get('days', 7))
        data = get_auto_checkin_data(days=days)
        
        # –°–æ–∑–¥–∞–µ–º Excel workbook
        output = BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # Sheet 1: Auto Check-ins
            checkins_data = []
            for log in data['auto_checkins']:
                # –ü–æ–ª—É—á–∞–µ–º Visit –æ–±—ä–µ–∫—Ç –ø–æ object_id
                try:
                    visit = Visit.objects.select_related('guest', 'employee', 'department').get(id=log.object_id)
                    checkins_data.append({
                        '–î–∞—Ç–∞/–í—Ä–µ–º—è': log.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                        '–ì–æ—Å—Ç—å': visit.guest.full_name if visit.guest else '-',
                        '–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π': visit.employee.get_full_name() if visit.employee else '-',
                        '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': visit.department.name if visit.department else '-',
                        '–°–æ–±—ã—Ç–∏–µ': '–í—Ö–æ–¥',
                    })
                except Visit.DoesNotExist:
                    pass
            
            if checkins_data:
                df_checkins = pd.DataFrame(checkins_data)
                df_checkins.to_excel(writer, sheet_name='Check-ins', index=False)
            
            # Sheet 2: Auto Check-outs
            checkouts_data = []
            for log in data['auto_checkouts']:
                # –ü–æ–ª—É—á–∞–µ–º Visit –æ–±—ä–µ–∫—Ç –ø–æ object_id
                try:
                    visit = Visit.objects.select_related('guest', 'employee', 'department').get(id=log.object_id)
                    checkouts_data.append({
                        '–î–∞—Ç–∞/–í—Ä–µ–º—è': log.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                        '–ì–æ—Å—Ç—å': visit.guest.full_name if visit.guest else '-',
                        '–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π': visit.employee.get_full_name() if visit.employee else '-',
                        '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': visit.department.name if visit.department else '-',
                        '–°–æ–±—ã—Ç–∏–µ': '–í—ã—Ö–æ–¥',
                    })
                except Visit.DoesNotExist:
                    pass
            
            if checkouts_data:
                df_checkouts = pd.DataFrame(checkouts_data)
                df_checkouts.to_excel(writer, sheet_name='Check-outs', index=False)
            
            # Sheet 3: Security Incidents
            incidents_data = []
            for incident in data['incidents']:
                incidents_data.append({
                    '–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': incident.detected_at.strftime('%Y-%m-%d %H:%M:%S'),
                    '–¢–∏–ø': incident.get_incident_type_display(),
                    '–£—Ä–æ–≤–µ–Ω—å': incident.get_severity_display(),
                    '–°—Ç–∞—Ç—É—Å': incident.get_status_display(),
                    '–ì–æ—Å—Ç—å': incident.visit.guest.full_name if incident.visit and incident.visit.guest else '-',
                    '–û–ø–∏—Å–∞–Ω–∏–µ': incident.description,
                })
            
            if incidents_data:
                df_incidents = pd.DataFrame(incidents_data)
                df_incidents.to_excel(writer, sheet_name='Incidents', index=False)
        
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º response
        response = HttpResponse(
            output.getvalue(),
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        filename = f'auto_checkin_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        logger.info(f"Auto Check-in Excel exported by {request.user.username}")
        return response
        
    except ImportError as e:
        logger.error(f"Required library not installed: {e}")
        return HttpResponse(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {e}. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run pip install pandas openpyxl",
            status=500
        )
    except Exception as e:
        logger.error(f"Error exporting Auto Check-in Excel: {e}", exc_info=True)
        return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel: {e}", status=500)


@login_required
@permission_required('visitors.view_securityincident', raise_exception=True)
def export_security_incidents_excel(request):
    """
    –≠–∫—Å–ø–æ—Ä—Ç Security Incidents Dashboard –≤ Excel.
    """
    try:
        import pandas as pd
        
        days = int(request.GET.get('days', 30))
        status = request.GET.get('status')
        incident_type = request.GET.get('incident_type')
        severity = request.GET.get('severity')
        
        data = get_security_incidents_data(
            days=days,
            status=status,
            incident_type=incident_type,
            severity=severity
        )
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        incidents_data = []
        for incident in data['incidents']:
            incidents_data.append({
                'ID': incident.id,
                '–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': incident.detected_at.strftime('%Y-%m-%d %H:%M:%S'),
                '–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞': incident.get_incident_type_display(),
                '–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏': incident.get_severity_display(),
                '–°—Ç–∞—Ç—É—Å': incident.get_status_display(),
                '–ì–æ—Å—Ç—å': incident.visit.guest.full_name if incident.visit and incident.visit.guest else '-',
                '–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π': incident.visit.employee.get_full_name() if incident.visit and incident.visit.employee else '-',
                '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': incident.visit.department.name if incident.visit and incident.visit.department else '-',
                '–û–ø–∏—Å–∞–Ω–∏–µ': incident.description,
                '–ù–∞–∑–Ω–∞—á–µ–Ω': incident.assigned_to.get_full_name() if incident.assigned_to else '-',
                '–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è': incident.resolved_at.strftime('%Y-%m-%d %H:%M:%S') if incident.resolved_at else '-',
                '–ó–∞–º–µ—Ç–∫–∏': incident.resolution_notes or '-',
            })
        
        df = pd.DataFrame(incidents_data)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Security Incidents', index=False)
        
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º response
        response = HttpResponse(
            output.getvalue(),
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        filename = f'security_incidents_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        logger.info(f"Security Incidents Excel exported by {request.user.username}")
        return response
        
    except ImportError as e:
        return HttpResponse(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {e}. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run pip install pandas openpyxl",
            status=500
        )
    except Exception as e:
        logger.error(f"Error exporting Security Incidents Excel: {e}", exc_info=True)
        return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel: {e}", status=500)


@login_required
@permission_required('visitors.view_visit', raise_exception=True)
def export_hikcentral_excel(request):
    """
    –≠–∫—Å–ø–æ—Ä—Ç HikCentral Dashboard –≤ Excel.
    """
    try:
        import pandas as pd
        
        data = get_hikcentral_data()
        
        if 'error' in data:
            return HttpResponse(f"–û—à–∏–±–∫–∞: {data['error']}", status=500)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_data = [
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–°–µ—Ä–≤–µ—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.get('server_name', '-')},
            {'–ú–µ—Ç—Ä–∏–∫–∞': 'URL', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.get('server_url', '-')},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–°—Ç–∞—Ç—É—Å', '–ó–Ω–∞—á–µ–Ω–∏–µ': '–ê–∫—Ç–∏–≤–µ–Ω' if data.get('is_active') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–õ–∏—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (24—á)', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.get('faces_enrolled_24h', 0)},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω (24—á)', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.get('access_granted_24h', 0)},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (24—á)', '–ó–Ω–∞—á–µ–Ω–∏–µ': data.get('auto_actions_24h', 0)},
        ]
        
        df = pd.DataFrame(stats_data)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='HikCentral Status', index=False)
        
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º response
        response = HttpResponse(
            output.getvalue(),
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        filename = f'hikcentral_status_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        logger.info(f"HikCentral Excel exported by {request.user.username}")
        return response
        
    except ImportError as e:
        return HttpResponse(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {e}. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run pip install pandas openpyxl",
            status=500
        )
    except Exception as e:
        logger.error(f"Error exporting HikCentral Excel: {e}", exc_info=True)
        return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel: {e}", status=500)

