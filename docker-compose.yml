version: '3.8'

services:
  db:
    image: postgres:13-alpine
    container_name: myproject_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "54321:5432"
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    container_name: myproject_redis
    restart: unless-stopped
    ports:
      - "63790:6379"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myproject_app
    restart: unless-stopped
    # command: poetry run gunicorn --bind 0.0.0.0:8000 your_project_name.wsgi:application (если не entrypoint.sh)
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - "8000"
    env_file:
      - ./.env
    depends_on:
      - db
      - redis

  celeryworker:
    build:
      context: .
      dockerfile: Dockerfile # Используем тот же Dockerfile
    container_name: myproject_celeryworker
    # Команды запускаются через poetry run
    command: poetry run celery -A your_project_name worker -l info
    volumes:
      - media_volume:/app/mediafiles
    env_file:
      - ./.env
    depends_on:
      - redis
      - db
      - app
    restart: unless-stopped
  celerybeat:
    build:
      context: .
      dockerfile: Dockerfile # Используем тот же Dockerfile
    container_name: myproject_celerybeat
    # Команды запускаются через poetry run
    command: poetry run celery -A your_project_name beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - media_volume:/app/mediafiles
    env_file:
      - ./.env
    depends_on:
      - redis
      - db
      - app
    restart: unless-stopped

  nginx:
    image: nginx:stable-alpine
    container_name: myproject_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      # - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume: